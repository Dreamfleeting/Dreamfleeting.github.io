<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
    
    <entry>
      <title><![CDATA[gzexe加密与解密]]></title>
      <url>http://skylinyi.github.io/2016/08/24/gzexe%E5%8A%A0%E5%AF%86%E4%B8%8E%E8%A7%A3%E5%AF%86/</url>
      <content type="html"><![CDATA[<h1 id="gzexe加密与解密shell脚本"><a href="#gzexe加密与解密shell脚本" class="headerlink" title="gzexe加密与解密shell脚本"></a>gzexe加密与解密shell脚本</h1><p>我们写的shell脚本里面通常会包含帐号密码等信息或者你不想让别人看到的信息，那么把写好的shell脚本进行简单的加密显得有些必要了。</p>
<p>常用的shell加密方法有两种，一种是通过gzexe加密，另一种是通过shc加密。</p>
<p>我们先给一个简单的脚本，然后用它来进行加密解密演示，脚本abc.sh内容如下</p>
<pre><code>
#!/bin/bash
echo "hello world!"
</code></pre>
## 加密
<pre><code>
shell > bash abc.sh         # 执行后显示内容
hello world!
shell > gzexe abc.sh         # 压缩
abc.sh:  18.8%
shell > ls -l                # 压缩完成后， abc.sh~ 是原文件 ， abc.sh 是压缩后的二进制文件
abc.sh
abc.sh~
shell > mv abc.sh abc
shell > sh abc             # 压缩后再执行正常
hello world!
</code></pre>

<p>我们只需要把abc这个二进制文件传到机器上执行就可以了，并不需要关心它的源码，别人也不能通过这个文件看到shell代码，我们cat显示一下这个文件发现内容全部乱码。</p>
<p>但是通过gzexe加密的shell脚本并不是很安全，细看我们如何通过abc这个乱码的执行文件还原成原来的shell脚本。</p>
<p>我们看到内容中有一行叫skip=44，这一行非常重要，它告诉我们从第44行起才是原来压缩之前文件的内容，前面都是压缩软件附加上去的内容。虽然从44行往后面也全部都是乱码，我们也读不懂这些内容，但是gzip程序会告诉我们的。</p>
<p>首先我们把第44行以后的内容过滤出来生成一个.gz结尾文件，然后解压，文件内容就都出来了。</p>
<pre><code>
shell > tail -n +44 abc > /tmp/a.gz       # 我们把第44行以后的文件写成一个.gz结尾的压缩文件
shell > cd /tmp
shell > gunzip a.gz            # 解压生成的文件
shell > cat a                  # 解压后的文件和压缩文件同名
#!/bin/bash
echo "hello world!"
</code></pre>

<p>我们看到解压之后，文件里面的内容和原来压缩之前是一样的，成功完成解密。</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[记流年]]></title>
      <url>http://skylinyi.github.io/2016/08/19/%E8%AE%B0%E6%B5%81%E5%B9%B4/</url>
      <content type="html"><![CDATA[<h2 id="记流年"><a href="#记流年" class="headerlink" title="记流年"></a>记流年</h2><div align="center"><br><br>你说帘外海棠，锦屏鸳鸯；后来庭院春深，咫尺画堂。<br><br>你说笛声如诉，费尽思量；后来茶烟尚绿，人影茫茫。<br><br>你说可人如玉，与子偕臧；后来长亭远望，夜色微凉。<br><br>你说霞染天光，陌上花开与谁享；后来烟笼柳暗，湖心水动影无双。<br><br>你说彼岸灯火，心之所向；后来渔舟晚唱，烟雨彷徨。<br><br><a id="more"></a><br><br>你说水静莲香，惠风和畅；后来云遮薄月，清露如霜。<br><br>你说幽窗棋罢，再吐衷肠；后来风卷孤松，雾漫山冈。<br><br>你说红袖佯嗔，秋波流转思张敞；后来黛眉长敛，春色飘零别阮郎。<br><br>你说暗香浮动，刹那光芒；后来玉殒琼碎，疏影横窗。<br><br>你说良辰美景，乘兴独往；后来红尘紫陌，雪落太行。<br><br>你说赋尽高唐，三生石上；后来君居淄右，妾家河阳。<br><br>你说玉楼朱颜，飞月流觞迎客棹；后来幽谷居士，枕琴听雨卧禅房。<br><br>你说高山流水，客答春江，后来章台游冶，系马垂杨。<br><br>你说锦瑟韶光，华灯幢幢；后来荼靡开至，青苔满墙。<br><br>你说天地玄黄，风月琳琅；后来月斜江上，云淡天长。<br><br>你说兰舟轻发，西楼月下忆姣娘；后来江湖两忘，只影天涯踏<br><br></div>

<p>…………</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[SHC加密解密]]></title>
      <url>http://skylinyi.github.io/2016/08/19/SHC%E5%8A%A0%E5%AF%86%E8%A7%A3%E5%AF%86/</url>
      <content type="html"><![CDATA[<h1 id="SHC说明："><a href="#SHC说明：" class="headerlink" title="SHC说明："></a>SHC说明：</h1><p>SHC是一个用于加密linux脚本的软件。对普通用户来说可以提高安全性。<br>如果我们写的shell脚本里有敏感信息，或者不愿意让人看到和修改shell代码，就可以使用shell加密。</p>
<p>SHC是一个脚本编译程序，使用RC4加密代码加密shell， 并把shell程序转换为二进制可执行文件（支持动态链接和静态链接）</p>
<a id="more"></a>
<h1 id="安装："><a href="#安装：" class="headerlink" title="安装："></a>安装：</h1><p>SHC官网<br>可以在官网上获取到最新的源码。</p>
<p><pre><code><br>wget <a href="http://www.datsi.fi.upm.es/~frosal/sources/shc-3.8.9b.tgz" target="_blank" rel="external">http://www.datsi.fi.upm.es/~frosal/sources/shc-3.8.9b.tgz</a><br>tar vxf shc-3.8.9b.tgz<br>cd shc-3.8.9b<br>make test<br>make strings<br>make install<br></code></pre></p>
<h3 id="输出"><a href="#输出" class="headerlink" title="输出"></a>输出</h3><p><pre><code><br><strong><em>     Installing shc and shc.1 on /usr/local
</em></strong>     ?Do you want to continue? y<br>install -c -s shc /usr/local/bin/<br>install -c -m 644 shc.1 /usr/local/man/man1/<br>install: target `/usr/local/man/man1/‘ is not a directory: No such file or directory<br>make: <em>*</em> [install] Error 1<br></code></pre><br>如上的错误可以无视，其中少了对应的帮助文档。</p>
<h3 id="参数"><a href="#参数" class="headerlink" title="参数"></a>参数</h3><p>-e date (指定过期时间)<br>-m message  （指定过期提示的信息）<br>-f  script_name （指定要编译的shell路径）<br>-r  relax security  （在不同操作系统执行）<br>-v  Verbose compilation （输出编译的详细情况）</p>
<h3 id="使用示例"><a href="#使用示例" class="headerlink" title="使用示例"></a>使用示例</h3><p><pre><code><br>shc -v -f abc.sh<br>shc -e 28/01/2012 -m “过期” -f abc.sh<br></code></pre><br>静态链接</p>
<h3 id="前面加上"><a href="#前面加上" class="headerlink" title="前面加上"></a>前面加上</h3><p><pre><code><br>CFLAGS=-static<br></code></pre></p>
<h3 id="例如"><a href="#例如" class="headerlink" title="例如"></a>例如</h3><p><pre><code><br>CFLAGS=-static shc -v -f abc.sh<br></code></pre><br>解密<br>虽然编译这种方式是一种不错的选择，但是shc的加密方式还是可以破解的。原因是它会在内存中解密全部的shell代码，所以我们可以从内存中取到其代码。</p>
<p>具体步骤</p>
<p>前期准备</p>
<h3 id="开启core-dump"><a href="#开启core-dump" class="headerlink" title="开启core dump"></a>开启core dump</h3><p><pre><code><br>ulimit -c 70000<br>echo “/core_dump/core.%e.%p” &gt; /proc/sys/kernel/core_pattern<br></code></pre><br>开始破解</p>
<h3 id="执行脚本并中断"><a href="#执行脚本并中断" class="headerlink" title="执行脚本并中断"></a>执行脚本并中断</h3><h3 id="脚本二进制文件名定为-abc"><a href="#脚本二进制文件名定为-abc" class="headerlink" title="脚本二进制文件名定为 abc"></a>脚本二进制文件名定为 abc</h3><p><pre><code><br>./abc (sleep 0.2 &amp;&amp; kill -SIGSEGV $!)<br></code></pre></p>
<h3 id="输出脚本执行信息和脚本代码到文件"><a href="#输出脚本执行信息和脚本代码到文件" class="headerlink" title="输出脚本执行信息和脚本代码到文件"></a>输出脚本执行信息和脚本代码到文件</h3><p><pre><code><br>cd /core_dump<br>cat ./core.<strong><em>.*</em></strong> | strings &gt; ~/abc.sh<br></code></pre><br><strong><em>.</em></strong>是你执行代码后的随机值（对应的PID等）<br>现在去对abc.sh文件进行一些多余文本的删除就得到解密后的脚本了。</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[我的博客终于上线了！]]></title>
      <url>http://skylinyi.github.io/2016/08/19/%E5%8D%9A%E5%AE%A2%E7%BB%88%E4%BA%8E%E4%B8%8A%E7%BA%BF%E4%BA%86%EF%BC%81/</url>
      <content type="html"><![CDATA[<h3 id="经历了几个小时的摸索，终于把hexo搭建好了。"><a href="#经历了几个小时的摸索，终于把hexo搭建好了。" class="headerlink" title="经历了几个小时的摸索，终于把hexo搭建好了。"></a>经历了几个小时的摸索，终于把hexo搭建好了。</h3><h4 id="个人博客其实在过年的时候便准备上线，无奈手头事太多，导致耽搁到了现在"><a href="#个人博客其实在过年的时候便准备上线，无奈手头事太多，导致耽搁到了现在" class="headerlink" title="个人博客其实在过年的时候便准备上线，无奈手头事太多，导致耽搁到了现在"></a>个人博客其实在过年的时候便准备上线，无奈手头事太多，导致耽搁到了现在</h4>]]></content>
    </entry>
    
  
  
</search>
